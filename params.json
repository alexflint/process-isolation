{"name":"Process-isolation","tagline":"Elegant process isolation in pure python","body":"# Process Isolation in Python\r\n\r\nProcess isolation is a simple and elegant tool that lets you run\r\npython modules in sub-processes.\r\n\r\n```\r\nfrom process_isolation import import_isolated\r\nsys = import_isolated('sys')\r\nsys.stdout.write('Hello world\\n')\r\n````\r\n\r\nA few things happened here:\r\n\r\n1. We imported the `process_isolation` module:\r\n    ```\r\n    from process_isolation import import_isolated\r\n    ````\r\n\r\n2. The process forked and the `sys` module was imported in the child process:\r\n    ```\r\n    sys = import_isolated('sys')\r\n    ```\r\n\r\n3. The parent process requested that the child process run `sys.stdout.write('Hello world\\n')`:\r\n    ```\r\n    sys.stdout.write('Hello world\\n')\r\n    ```\r\n\r\n4. The child process wrote `Hello world` to standard output.\r\n\r\n\r\nOne reason tun run code in an isolated process is to debug code that\r\ncrashes at the operating system level with a segmentation fault or\r\nother signal. Here is some dangerous code:\r\n\r\n```\r\n# buggy.py:\r\n\r\nimport types\r\ndef dragons_here():\r\n    types.FunctionType(types.CodeType(0, 0, 1, 0, 'd\\x00\\x00S', (), (), (), '', '', 1, ''),{})()\r\n```\r\n\r\nRunning this code causes a hard abort (not a regular python exception),\r\nwhich makes it difficult to debug:\r\n\r\n```\r\n>>> import buggy\r\n>>> buggy.dragons_here()\r\nSegmentation fault: 11\r\n```\r\n\r\nWe can safely run this code inside an isolated process, and do\r\nsomething when it crashes:\r\n\r\n```\r\nfrom process_isolation import import_isolated, ProcessTerminationError\r\nbuggy = import_isolated('buggy')\r\ntry:\r\n    buggy.dragons_here()\r\nexcept ProcessTerminationError as ex:\r\n    print 'There be dragons!'\r\n````\r\n\r\n### Using process isolation\r\n\r\n`process_isolation` tries to be as transparent as possible. In many\r\ncases it is possible to simply replace \r\n\r\n    import X\r\n\r\nwith \r\n\r\n    X = import_isolated('X')\r\n\r\nand leave all other code unchanged. `process_isolation` shuttles data\r\nback and forward between the main python interpreter and the forked\r\nchild process, using proxies on the client side in place of objects\r\nthat actually reside inside an isolated sub-process.\r\n\r\n### Caveats\r\n\r\n### Why process isolation?\r\n\r\n### More sophisticated examples\r\n\r\n### Copying objects between processes\r\n\r\n### Under the hood\r\n\r\n","google":"UA-36566659-2","note":"Don't delete this file! It's used internally to help with page regeneration."}